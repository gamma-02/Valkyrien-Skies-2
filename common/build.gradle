dependencies {
    annotationProcessor(implementation("com.github.llamalad7.mixinextras:mixinextras-common:0.2.0-beta.8"))

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    // We depend on fabric loader here to use the fabric @Environment annotations
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    modApi("me.shedaniel.cloth:cloth-config:11.0.99")

    modCompileOnly("maven.modrinth:sodium:mc1.20.1-0.5.3")

    // vs-core
    implementation("org.valkyrienskies.core:impl:${rootProject.vs_core_version}") {
        exclude module: "netty-buffer"
        exclude module: "fastutil"
        exclude group: "com.google.guava"
    }

    // FTB Stuffs
    // modCompileOnly("curse.maven:ftb-util-404465:4210935")
    // modCompileOnly("curse.maven:ftb-teams-404468:4229138")
    // modCompileOnly("curse.maven:ftb-chunks-314906:4229120")

    // Common create compat,
    // We just use a version from a platform and hope the classes exist on both versions and mixins apply correctly
    modCompileOnly("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}")
        { exclude group: 'com.github.AlphaMode', module: 'fakeconfigtoml' }
    modCompileOnly("com.jozufozu.flywheel:flywheel-fabric-${minecraft_version}:0.6.9-4")
}

architectury {
    common(rootProject.enabled_platforms.split(","))
}

loom {
    accessWidenerPath = file("src/main/resources/valkyrienskies-common.accesswidener")
}

jar {
    // Exclude dummy Optifine classes
    exclude "net/optifine/**"
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            groupId = "org.valkyrienskies"
            version = project.version
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java

            artifact(jar) {
                classifier 'dev'
            }
        }
    }
}
